#include "globals.h"
#include "sid.h"
#include "lfo.h"
#include "leds.h"
#include "isr.h"

static int presetScrollTimer;
static int envCounter;
static int lfoCounter[3];
static int env2;

const int envMap[] = {
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   4,   4,   4,   4,   4,   4,   4,   4,   4,
    4,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   6,   6,   6,   6,   6,   6,   6,   6,   6,
    6,   6,   6,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,   8,   8,   8,   8,
    8,   8,   8,   9,   9,   9,   9,   9,   9,   9,   10,  10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,
    11,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,
    15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,
    18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,
    22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,
    25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,
    29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,
    31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,
    34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  36,  37,  38,  39,  40,  41,  43,  44,  45,  46,  47,  48,  49,
    50,  51,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  64,  65,  66,  67,  68,  69,  70,  71,  72,  74,  75,
    76,  77,  78,  79,  80,  81,  82,  83,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  96,  97,  98,  99,  100,
    101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125,
    127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151,
    152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176,
    178, 180, 181, 183, 185, 186, 188, 189, 191, 193, 194, 196, 198, 199, 201, 203, 204, 206, 208, 209, 211, 213, 214,
    216, 218, 219, 221, 223, 224, 226, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 247, 249, 251, 252,
    254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 272, 274, 276, 277, 279, 281, 282, 283, 284, 286, 287, 288,
    289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313,
    314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339,
    340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352,
};

const int envMap2[] = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   11,   11,
    11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   12,   12,   12,   12,   12,   12,
    12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
    14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,   16,
    16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
    16,   16,   16,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
    20,   20,   20,   20,   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,   22,   22,
    22,   23,   23,   24,   24,   25,   25,   26,   26,   27,   27,   28,   28,   29,   29,   30,   30,   31,   31,
    32,   32,   33,   33,   34,   34,   35,   35,   36,   36,   37,   38,   38,   39,   39,   40,   40,   41,   41,
    42,   42,   43,   43,   44,   44,   45,   45,   46,   46,   47,   47,   48,   48,   49,   49,   50,   50,   51,
    51,   52,   52,   53,   53,   54,   54,   55,   56,   57,   58,   59,   60,   61,   61,   62,   63,   64,   65,
    66,   67,   67,   68,   69,   70,   71,   72,   73,   74,   74,   75,   76,   77,   78,   79,   80,   80,   81,
    82,   83,   84,   85,   86,   87,   87,   88,   89,   90,   91,   92,   93,   93,   94,   95,   96,   97,   98,
    99,   100,  100,  101,  102,  103,  104,  105,  106,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
    116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  127,  128,  129,  130,  131,  132,  133,  134,  135,
    136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
    156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
    175,  176,  177,  178,  178,  179,  180,  180,  181,  182,  182,  183,  184,  185,  185,  186,  187,  187,  188,
    189,  189,  190,  191,  191,  192,  193,  193,  194,  195,  196,  196,  197,  198,  198,  199,  200,  200,  201,
    202,  202,  203,  204,  205,  205,  206,  207,  207,  208,  209,  209,  210,  211,  211,  212,  213,  213,  214,
    215,  216,  216,  217,  218,  218,  219,  220,  220,  227,  234,  241,  248,  255,  262,  269,  276,  283,  289,
    296,  303,  310,  317,  324,  331,  338,  345,  352,  358,  365,  372,  379,  386,  393,  400,  407,  414,  421,
    427,  434,  441,  448,  455,  462,  469,  476,  483,  490,  497,  503,  510,  517,  524,  531,  538,  545,  552,
    559,  566,  572,  579,  586,  593,  600,  607,  614,  621,  628,  635,  641,  648,  655,  662,  669,  676,  683,
    690,  697,  704,  711,  717,  724,  731,  738,  745,  752,  759,  766,  773,  780,  786,  793,  800,  807,  814,
    821,  828,  835,  842,  849,  855,  862,  869,  876,  883,  890,  897,  904,  911,  918,  925,  931,  938,  945,
    952,  959,  966,  973,  980,  987,  994,  1000, 1007, 1014, 1021, 1028, 1035, 1042, 1049, 1056, 1063, 1069, 1076,
    1083, 1090, 1097, 1104, 1114, 1125, 1135, 1145, 1156, 1166, 1176, 1187, 1197, 1208, 1218, 1228, 1239, 1249, 1259,
    1270, 1280, 1290, 1301, 1311, 1321, 1332, 1342, 1353, 1363, 1373, 1384, 1394, 1404, 1415, 1425, 1435, 1446, 1456,
    1466, 1477, 1487, 1497, 1508, 1518, 1529, 1539, 1549, 1560, 1570, 1580, 1591, 1601, 1611, 1622, 1632, 1642, 1653,
    1663, 1674, 1684, 1694, 1705, 1715, 1725, 1736, 1746, 1756, 1767, 1774, 1781, 1787, 1794, 1801, 1808, 1815, 1822,
    1829, 1836, 1843, 1850, 1856, 1863, 1870, 1877, 1884, 1891, 1898, 1905, 1912, 1919, 1925, 1932, 1939, 1946, 1953,
    1960, 1967, 1974, 1981, 1988, 1995, 2001, 2008, 2015, 2022, 2029, 2036, 2043, 2050, 2057, 2064, 2070, 2077, 2084,
    2091, 2098, 2105, 2112, 2119, 2126, 2133, 2139, 2146, 2153, 2160, 2167, 2174, 2181, 2188, 2195, 2202,
};

// interrupt service route to animate things (LFO arp etc)
// called at 10kHz frequency (probably slower) // FIXME figure out the actual frequency.
void isr() {

	if (shape1Pressed) {
		shape1PressedTimer++;
	}

	if (resetDown) {
		resetDownTimer++;
		if (resetDownTimer > 16000) {
			resetDown = 0;
			resetDownTimer = 0;
			jumble = 1;
		}
	}

	// ENV
	switch (envState) {
		case 1:
			if (a4 == 0) { // FIXME get rid of a4
				env = 255;
				envState = 2;
			} else {
				envCounter++;
				if (envCounter >= envMap[a4]) {
					envCounter = 0;
					env += 1;
					if (env > 255) {
						env = 255;
						envState = 2;
					}
				}
			}
			break; // ATTACK
		case 2:
			if (d4 == 0) {
				env = s4;
				envState = 3;
			}
			envCounter++;
			if (envCounter >= envMap[d4]) {
				envCounter = 0;
				env -= 1;
				if (env < s4) {
					env = s4;
					envState = 3;
				}
			}
			break; // DECAY
		case 3:
			env = s4;
			env2 = 255;
			break; // SUSTAIN
		case 4:
			envCounter++;
			if (envCounter >= envMap2[r4]) {
				envCounter = 0;
				env2 -= 1;
				env = map(env2, 255, 0, s4, 0);
				if (env2 < 1) {
					env = 0;
					envState = 0;
				}
			}
			break; // RELEASE
	}

	if (loadTimer)
		loadTimer--;

	if (filterModeHeld) {
		arpModeCounter++;
		if (arpModeCounter > 25000) {
			fatChanged = true;
			arpModeCounter = 0;
			preset_data.fat_mode = static_cast<FatMode>(((int)preset_data.fat_mode + 1) % 4);
			fatShow = true;
		}
	}

	/* FIXME: redo CV/gate functionality
	// cvGate
	gate = (PINA & _BV(7)) == 0;
	if (gate != gateLast) {
		gateLast = gate;
		bitWrite(sid[4], 0, gate);
		bitWrite(sid[11], 0, gate);
		bitWrite(sid[18], 0, gate);
		held = 0;
	}
	*/

	if (saveMode) {
		saveModeTimer++;
	}

	if (!sync) {
		// ARP
		if (preset_data.arp_mode && arping && voice_state.n_held_keys() > 0) {
			arpCounter++;
		}
	}
	if (presetUp || presetDown) {
		if (presetUp && !presetDown) {
			presetScrollTimer += 4;
			if (presetScrollTimer > presetScrollSpeed) {
				presetScrollTimer = 0;
				if (presetScrollSpeed > 1001) {
					presetScrollSpeed -= 1000;
				}
				preset++;
				if (preset > 99) {
					preset = 1;
				}
				showPresetNumber = true;
				scrolled = true;
			}
		} else if (!presetUp && presetDown) {
			presetScrollTimer += 4;
			if (presetScrollTimer > presetScrollSpeed) {
				presetScrollTimer = 0;
				if (presetScrollSpeed > 1001) {
					presetScrollSpeed -= 1000;
				}
				preset--;
				if (preset < 1) {
					preset = 99;
				}
				showPresetNumber = true;
				scrolled = true;
			}
		}
	}

	if (lfoButtPressed) {
		lfoButtTimer++;
		if (lfoButtTimer == 6000) {
			clearLfo();
			lfoButtTimer = 0;
			lfoButtPressed = false;
		}
	} // delete LFO stuff

	// glides

	// in monophonic mode, we glide only while the old note is still held down.
	bool skip_glide = !preset_data.paraphonic && voice_state.n_held_keys() <= 1;
	for (int i=0; i<6; i++) {
		int voice_idx = preset_data.paraphonic ? 0 : (i % 3); // FIXME this is not nice
		glide[i].glide_tick(skip_glide ? 0 : preset_data.voice[voice_idx].glide);
	}


	// LFO
	for (int i = 0; i < 3; i++) {
		if (!sync) {
			lfoCounter[i] += lfoSpeed[i];
			if (lfoCounter[i] >= 4000) {
				lfoCounter[i] -= 4000;
				lfoStep[i]++;

				if (lfoStep[i] > 254) {
					if (preset_data.lfo[i].looping) {
						lfoStep[i] = 0;
					} else {
						lfoStep[i] = 255;
					}
				}
			}
		}
	}
}
